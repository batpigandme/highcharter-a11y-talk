---
title: "Adventures with {highcharter} and the Highcharts accessibility module"
author: "Mara Averick"
date: 2022-03-09
format: 
  revealjs:
    theme: [default, custom.scss]
    bibliography: biblio.bib
    self-contained: false
    preview-links: auto
    lang: en
    code-fold: true
    freeze: true
---

## About me üëã

::: incremental
-   Mara Averick\
-   Developer Advocate, RStudio üë©‚Äçüíª\
-   Missoula, MT üèîÔ∏è
:::

. . .

#### Things I did not create:

::: incremental
-   {highcharter} [@kunst2021]

-   Highcharts [@highcharts2021]
:::

. . .

::: {style="text-align: right; font-size: 0.85em;"}
*n.b.* The above list is not exhaustive.
:::

------------------------------------------------------------------------

## Highcharts<sup>¬Æ</sup> JS

> Highcharts...is a pure JavaScript charting library based on SVG that makes it easy for developers to create responsive, interactive and accessible charts.

![](images/screenshot-highchartsjs-homepage-min.png){fig-alt="Screenshot of highcharts JS page, shows an example chart of distribution of icebergs." fig-align="center"}

::: footer
<https://www.highcharts.com/products/highcharts/>
:::

------------------------------------------------------------------------

## highcharter

![](images/highcharter-logo.png){.absolute top="0" right="0" width="166" height="192" fig-alt="hexagon logo for the highcharter package."}

> highcharter is an R wrapper for Highcharts JavaScript library and its modules.

![](images/screenshot-highcharter-homepage-min.png){fig-alt="Screenshot of highcharts r package homepage." fig-align="center" width="700"}

::: footer
src: Joshua Kunst <https://jkunst.com/highcharter/>
:::

------------------------------------------------------------------------

## Background / inspiration {.r-fit-text}

**Resources for Data Viz Accessibility** by Silvia Canel√≥n

> A selection of general and R-specific resources on how and why to make accessible data visualizations. [@canelon2021]

::: footer
<https://www.silviacanelon.com/blog/2021-data-viz-a11y/>
:::

::: {.notes}
At the time of its first writing, Highcharts' accessibility module didn't seem to be working with the highcharter package.
:::


------------------------------------------------------------------------

## Motivating example {.smaller .scrollable}

Now with working keyboard navigation! üéâ

```{r}
#| echo: false
library(highcharter)
data <- data.frame(
    fruit = c("apple", "banana", "orange", "pear"),
    count = c(2, 3, 5, 4)
    )

highchart() %>%
  hc_add_dependency(name = "modules/accessibility.js") %>%
  hc_add_dependency(name = "modules/exporting.js") %>%
  hc_add_dependency(name = "modules/export-data.js") %>%
  hc_title(text = "Fruits") %>%
  hc_xAxis(categories = data$fruit) %>%
  hc_add_series(
    data = data$count,
    type = "column",
    name = "Count"
  ) %>%
  hc_exporting(
    enabled = TRUE,
    accessibility = list(
      enabled = TRUE
    )
  ) %>%
    hc_plotOptions(
      accessibility = list(
        enabled = TRUE,
        keyboardNavigation = list(enabled = TRUE)
    )
  )
```

::: footer
highcharter GitHub issue: [Keyboard navigation (accessibility setting) not working &num;707](https://github.com/jbkunst/highcharter/issues/707)
:::

::: {.notes}
This example, which I got working, came from a GitHub issue in which the user described the expected behavior (working keyboard navigation), and the fact that they weren't able to get it to work with the highcharter package.
:::

------------------------------------------------------------------------

## This talk...

::: {r-stack}

![](images/1-highcharter-diagram-start-finish-learning-along-the-way-min.png){.fragment width="998" height"401"}
![](images/2-highcharter-diagram-start-finish-learning-along-the-way-min.png){.fragment width="998" height"401"}
![](images/3-highcharter-diagram-start-finish-learning-along-the-way-min.png){.fragment width="998" height"401"}
![](images/4-highcharter-diagram-start-finish-learning-along-the-way-min.png){.fragment width="998" height"401"}
:::


------------------------------------------------------------------------

### San Francisco Arts Commission Example

<iframe data-src="https://www.highcharts.com/samples/nonav/highcharts/accessibility/art-grants" data-preload style="width:95%;height:95%;">

</iframe>

::: {.source .r-fit-text}
<https://www.highcharts.com/samples/nonav/highcharts/accessibility/art-grants>
:::

------------------------------------------------------------------------

### Assistive technology and the accessibility tree {.r-fit-text}

```{r}
#| label: a11y-tree
#| fig-alt: "Flow from application UI to accessibility tree to assistive technology to user."
knitr::include_graphics("images/wicg-aom-a11y-tree-min.png")
```

::: {.r-fit-text}
Source: Accessibility Object Model Explainer [@aom_explainer_2021]
:::

::: footer
Accessibility Object Model Explainer <https://wicg.github.io/aom/explainer.html>
:::

------------------------------------------------------------------------

### UI via assistive technology: example

```{r}
#| label: a11y-tree-example
#| fig-alt: "A full round trip from UI element to accessibility node to assistive technology to user to user keypress to accessibility API action method back to UI element."
knitr::include_graphics("images/wicg-aom-a11y-tree-example-min.png")
```

::: {.r-fit-text}
Source: Accessibility Object Model Explainer [@aom_explainer_2021]
:::

::: footer
Accessibility Object Model Explainer <https://wicg.github.io/aom/explainer.html>
:::

## Hidden screen-reader region {visibility="hidden"}

> This second video shows a screen reader navigating to the chart in a webpage, entering the hidden information region for the chart. This is where Ted and the developers added the structure description of chart that could benefit screen reader users, such as the chart type, axis information (automatically generated), and a long description of what is found in the chart (supplied by the chart creator): [Screen reader translating hidden information about chart details](https://www.elsevier.com/__data/assets/video_file/0006/1101597/Line2-top.mp4) [@bert2018].


## Video example {visibility="hidden"}

<https://youtu.be/w6ntxLG6MLQ>

------------------------------------------------------------------------

## Pretty Code {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
  })
}
```

------------------------------------------------------------------------

## Code Animations {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
    barplot(WorldPhones[,input$region]*1000, 
            main=input$region,
            ylab="Number of Telephones",
            xlab="Year")
  })
}
```

------------------------------------------------------------------------

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

## Code and working examples

[Accessible highcharter GitHub repo](https://github.com/batpigandme/accessible-highcharter)

------------------------------------------------------------------------

## Resources

-   [Alt-texts: The Ultimate Guide](https://axesslab.com/alt-texts/) by Daniel G√∂ransson [@goransson2017]

------------------------------------------------------------------------

## References


